# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19TZV3pSSLS1zsOV13tciPFRpbBrbWxgo
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install -U "tensorflow-text==2.15.*"
!pip install -U "tf-models-official==2.15.*"

import numpy as np
import pandas as pd
import kagglehub
import os
from sklearn.model_selection import train_test_split
import tensorflow_hub as hub
import tensorflow_text as text
from sklearn.metrics.pairwise import cosine_similarity
import tensorflow as tf
from tensorflow.keras import layers,Model,metrics

# Download latest version
path = kagglehub.dataset_download("ozlerhakan/spam-or-not-spam-dataset")

print("Path to dataset files:", path)

print("Downloaded to:", path)

for root, dirs, files in os.walk(path):
    for file in files:
        print(os.path.join(root, file))

df = pd.read_csv('/kaggle/input/spam-or-not-spam-dataset/spam_or_not_spam.csv')
print('Shape of data:', df.shape)

df.head()

#finding out if the dataset is imbalanced
print("number of spam and not spam email",df['label'].value_counts())

#down-sampling to make the dataset balance
df_spam=df[df.label==1]
blnc_num=df_spam.shape[0]
df_not_spam=df[df.label==0]
df_not_spam_blnced=df_not_spam.sample(blnc_num)
df_blnced=pd.concat([df_spam,df_not_spam_blnced])
print('The shape of the balanced dataset:',df_blnced.shape)

#display some rows of the balanced dataset
print(df_blnced.head())

#define X and Y
X=df_blnced['email']
Y=df_blnced['label']

#define X_train,X_test,Y_train,Y_test
X_train,X_test,Y_train,Y_test=train_test_split(X,Y)
# Make sure X_train is pure string
X_train = pd.Series(X_train).astype(str).to_numpy()
X_test = pd.Series(X_test).astype(str).to_numpy()

# Make sure Y_train is clean float (0.0, 1.0)
Y_train = pd.Series(Y_train).fillna(0).astype(float).to_numpy()
Y_test = pd.Series(Y_test).fillna(0).astype(float).to_numpy()

print('shape of X_train:',X_train.shape)
print('shape of Y_train:',Y_train.shape)
print('shape of X_test:',X_test.shape)
print('shape of Y_tesr:',Y_test.shape)

bert_preprocessor = hub.KerasLayer(
    "https://kaggle.com/models/tensorflow/bert/TensorFlow2/en-uncased-preprocess/3")
bert_encoder = hub.KerasLayer(
    "https://www.kaggle.com/models/tensorflow/bert/TensorFlow2/en-uncased-l-12-h-768-a-12/4")

def get_sentence(sentence):
  preprocessed_text=bert_preprocessor(sentence)
  return bert_encoder(preprocessed_text)['pooled_output']

e=get_sentence(['banana','apple','bill gates'])
e

# checking similarity
cosine_similarity([e[0]],[e[2]])

text_input = layers.Input(shape=(), dtype=tf.string)

encoder_inputs = bert_preprocessor(text_input)
outputs=bert_encoder(encoder_inputs)


l=layers.Dropout(0.1,name='dropout')(outputs['pooled_output'])
l=layers.Dense(128,activation='relu')(l)
l=layers.Dense(1,activation='sigmoid',name='output')(l)

model=Model([text_input],[l])
# Compile model
METRICS=[
    metrics.BinaryAccuracy(name='Accuracy'),
    metrics.Precision(name='precision'),
    metrics.Recall(name='recall')
]
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=METRICS)
model.summary()
model.fit(X_train,Y_train,epochs=15)

model.evaluate(X_test,Y_test)